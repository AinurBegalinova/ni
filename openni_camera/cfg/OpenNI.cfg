#! /usr/bin/env python

PACKAGE='openni_camera'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

point_cloud_type_enum = gen.enum([ gen.const("XYZ_unregistered", int_t, 0, "plain point cloud not registered with color image"),
                                   gen.const("XYZ_registered", int_t, 1, "plain point cloud not registered with color image"),
                                   gen.const("XYZRGB", int_t, 2, "point cloud with color information")],
                                   "point cloud type")

gen.add("point_cloud_type", int_t, 0, "Point cloud type", 2, 0, 2, edit_method = point_cloud_type_enum)

output_mode_enum = gen.enum([  gen.const( "SXGA_15Hz", int_t, 0, "1280x1024"),
                               gen.const(  "VGA_30Hz", int_t, 1, "640x480"),
                               gen.const( "QVGA_30Hz", int_t, 2, "320x240"),
                               gen.const("QQVGA_30Hz", int_t, 3, "160x120"),],
                               "output mode")

gen.add("depth_mode", int_t, 0, "depth output mode", 2, 1, 3, edit_method = output_mode_enum)

bayer_enum = gen.enum([gen.const("Bilinear", int_t, 0, "Fast debayering algorithm using bilinear interpolation"),
                       gen.const("EdgeAware", int_t, 1, "debayering algorithm using an edge-aware algorithm"),
                       gen.const("EdgeAwareWeighted", int_t, 2, "debayering algorithm using a weighted edge-aware algorithm")],
                                 "Bayer to RGB algorithm selection");

gen.add("image_mode", int_t, 0, "Image output mode for the color/grayscale image", 1, 0, 1, edit_method = output_mode_enum)

gen.add("Debayering", int_t, 0, "Bayer to RGB algorithm", 0, 0, 2, edit_method = bayer_enum)


exit(gen.generate(PACKAGE, "OpenNI", "OpenNI"))
